----
-- WAREHOUSE TABLE 関連
----

SELECT 'WAREHOUSE_MST_SALES';
CREATE TABLE IF NOT EXISTS WAREHOUSE_MST_SALES
(
  WAREHOUSE_CODE  VARCHAR(10)  NOT NULL  ,
  WAREHOUSE_NAME  VARCHAR(60)  NOT NULL ,
  WAREHOUSE_ZIP_CODE  CHAR(8)  ,
  WAREHOUSE_ADDRESS_1  VARCHAR(50)   ,
  WAREHOUSE_ADDRESS_2  VARCHAR(50)   ,
  WAREHOUSE_TEL  CHAR(15)   ,
  WAREHOUSE_FAX  CHAR(15)   ,
  MANAGER_NAME  VARCHAR(60) ,
  MANAGER_KANA  VARCHAR(60) ,
  MANAGER_TEL  CHAR(15)   ,
  MANAGER_FAX  CHAR(15)   ,
  MANAGER_EMAIL  VARCHAR(60)   ,
  WAREHOUSE_STATE  VARCHAR(10)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    WAREHOUSE_CODE
  )
) ENGINE=INNODB;

SELECT 'WAREHOUSE_MST_HIST_SALES';
CREATE TABLE IF NOT EXISTS WAREHOUSE_MST_HIST_SALES
(
  HIST_ID  INT UNSIGNED   ,
  ACTION_TYPE  VARCHAR(20)   ,
  ACTION_FUNC  VARCHAR(255)   ,
  REC_DATETM  DATETIME   ,
  REC_USER  VARCHAR(30)   ,
  WAREHOUSE_CODE  VARCHAR(10)  NOT NULL  ,
  WAREHOUSE_NAME  VARCHAR(60)  NOT NULL ,
  WAREHOUSE_ZIP_CODE  CHAR(8)  ,
  WAREHOUSE_ADDRESS_1  VARCHAR(50)   ,
  WAREHOUSE_ADDRESS_2  VARCHAR(50)   ,
  WAREHOUSE_TEL  CHAR(15)   ,
  WAREHOUSE_FAX  CHAR(15)   ,
  MANAGER_NAME  VARCHAR(60) ,
  MANAGER_KANA  VARCHAR(60) ,
  MANAGER_TEL  CHAR(15)   ,
  MANAGER_FAX  CHAR(15)   ,
  MANAGER_EMAIL  VARCHAR(60)   ,
  WAREHOUSE_STATE  VARCHAR(10)   ,
  CRE_FUNC  VARCHAR(255)   ,
  CRE_DATETM  DATETIME   ,
  CRE_USER  VARCHAR(30)   ,
  UPD_FUNC  VARCHAR(255)   ,
  UPD_DATETM  DATETIME   ,
  UPD_USER  VARCHAR(30)   ,
  DEL_FUNC  VARCHAR(255)   ,
  DEL_DATETM  DATETIME   ,
  DEL_USER  VARCHAR(30)   ,
  PRIMARY KEY (
    HIST_ID
  )
) ENGINE=INNODB;

ALTER TABLE RACK_MST_SALES ADD WAREHOUSE_CODE VARCHAR(10);
ALTER TABLE RACK_MST_HIST_SALES ADD WAREHOUSE_CODE VARCHAR(10);

CREATE INDEX WAREHOUSE_NAME ON WAREHOUSE_MST_SALES(WAREHOUSE_NAME);
CREATE INDEX WAREHOUSE_CODE ON WAREHOUSE_MST_SALES(WAREHOUSE_CODE);
CREATE INDEX WAREHOUSE_CODE ON RACK_MST_SALES(WAREHOUSE_CODE);


----
-- WAREHOUSE TRIGGER
----

DROP TRIGGER IF EXISTS WAREHOUSE_MST_SALES_INS;
DROP TRIGGER IF EXISTS WAREHOUSE_MST_SALES_UPD;
DROP TRIGGER IF EXISTS WAREHOUSE_MST_SALES_DEL;

----
-- WAREHOUSE TRIGGER
----
SELECT 'WAREHOUSE_MST_SALES';
DELIMITER //
CREATE TRIGGER WAREHOUSE_MST_SALES_INS AFTER INSERT ON WAREHOUSE_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('WAREHOUSE_MST');

INSERT INTO WAREHOUSE_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,WAREHOUSE_CODE,WAREHOUSE_NAME,WAREHOUSE_ZIP_CODE,WAREHOUSE_ADDRESS_1,WAREHOUSE_ADDRESS_2,WAREHOUSE_TEL,WAREHOUSE_FAX,MANAGER_NAME,MANAGER_KANA,MANAGER_TEL,MANAGER_FAX,MANAGER_EMAIL,WAREHOUSE_STATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES (  histId, 'INSERT', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.WAREHOUSE_CODE,NEW.WAREHOUSE_NAME,NEW.WAREHOUSE_ZIP_CODE,NEW.WAREHOUSE_ADDRESS_1,NEW.WAREHOUSE_ADDRESS_2,NEW.WAREHOUSE_TEL,NEW.WAREHOUSE_FAX,NEW.MANAGER_NAME,NEW.MANAGER_KANA,NEW.MANAGER_TEL,NEW.MANAGER_FAX,NEW.MANAGER_EMAIL,NEW.WAREHOUSE_STATE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER WAREHOUSE_MST_SALES_UPD AFTER UPDATE ON WAREHOUSE_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('WAREHOUSE_MST');

INSERT INTO WAREHOUSE_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,WAREHOUSE_CODE,WAREHOUSE_NAME,WAREHOUSE_ZIP_CODE,WAREHOUSE_ADDRESS_1,WAREHOUSE_ADDRESS_2,WAREHOUSE_TEL,WAREHOUSE_FAX,MANAGER_NAME,MANAGER_KANA,MANAGER_TEL,MANAGER_FAX,MANAGER_EMAIL,WAREHOUSE_STATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES (  histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.WAREHOUSE_CODE,NEW.WAREHOUSE_NAME,NEW.WAREHOUSE_ZIP_CODE,NEW.WAREHOUSE_ADDRESS_1,NEW.WAREHOUSE_ADDRESS_2,NEW.WAREHOUSE_TEL,NEW.WAREHOUSE_FAX,NEW.MANAGER_NAME,NEW.MANAGER_KANA,NEW.MANAGER_TEL,NEW.MANAGER_FAX,NEW.MANAGER_EMAIL,NEW.WAREHOUSE_STATE,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER WAREHOUSE_MST_SALES_DEL AFTER DELETE ON WAREHOUSE_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('WAREHOUSE_MST');

INSERT INTO WAREHOUSE_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,WAREHOUSE_CODE,WAREHOUSE_NAME,WAREHOUSE_ZIP_CODE,WAREHOUSE_ADDRESS_1,WAREHOUSE_ADDRESS_2,WAREHOUSE_TEL,WAREHOUSE_FAX,MANAGER_NAME,MANAGER_KANA,MANAGER_TEL,MANAGER_FAX,MANAGER_EMAIL,WAREHOUSE_STATE,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES (  histId, 'DELETE', OLD.UPD_FUNC, now(), OLD.UPD_USER,OLD.WAREHOUSE_CODE,OLD.WAREHOUSE_NAME,OLD.WAREHOUSE_ZIP_CODE,OLD.WAREHOUSE_ADDRESS_1,OLD.WAREHOUSE_ADDRESS_2,OLD.WAREHOUSE_TEL,OLD.WAREHOUSE_FAX,OLD.MANAGER_NAME,OLD.MANAGER_KANA,OLD.MANAGER_TEL,OLD.MANAGER_FAX,OLD.MANAGER_EMAIL,OLD.WAREHOUSE_STATE,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;


----
-- RACK TRIGGER
----

DROP TRIGGER IF EXISTS RACK_MST_SALES_INS;
DROP TRIGGER IF EXISTS RACK_MST_SALES_UPD;
DROP TRIGGER IF EXISTS RACK_MST_SALES_DEL;

DELIMITER //
SELECT 'RACK_MST_SALES'//
CREATE TRIGGER RACK_MST_SALES_INS AFTER INSERT ON RACK_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.CRE_USER IS NULL OR NEW.CRE_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RACK_MST');

INSERT INTO RACK_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,WAREHOUSE_CODE,RACK_CODE,RACK_NAME,RACK_CATEGORY,MULTI_FLAG,ZIP_CODE,ADDRESS_1,ADDRESS_2,RACK_PC_NAME,RACK_TEL,RACK_FAX,RACK_EMAIL,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'INSERT', NEW.CRE_FUNC, now(), NEW.CRE_USER,NEW.WAREHOUSE_CODE,NEW.RACK_CODE,NEW.RACK_NAME,NEW.RACK_CATEGORY,NEW.MULTI_FLAG,NEW.ZIP_CODE,NEW.ADDRESS_1,NEW.ADDRESS_2,NEW.RACK_PC_NAME,NEW.RACK_TEL,NEW.RACK_FAX,NEW.RACK_EMAIL,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER RACK_MST_SALES_UPD AFTER UPDATE ON RACK_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF NEW.UPD_USER IS NULL OR NEW.UPD_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RACK_MST');

INSERT INTO RACK_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,WAREHOUSE_CODE,RACK_CODE,RACK_NAME,RACK_CATEGORY,MULTI_FLAG,ZIP_CODE,ADDRESS_1,ADDRESS_2,RACK_PC_NAME,RACK_TEL,RACK_FAX,RACK_EMAIL,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'UPDATE', NEW.UPD_FUNC, now(), NEW.UPD_USER,NEW.WAREHOUSE_CODE,NEW.RACK_CODE,NEW.RACK_NAME,NEW.RACK_CATEGORY,NEW.MULTI_FLAG,NEW.ZIP_CODE,NEW.ADDRESS_1,NEW.ADDRESS_2,NEW.RACK_PC_NAME,NEW.RACK_TEL,NEW.RACK_FAX,NEW.RACK_EMAIL,NEW.CRE_FUNC,NEW.CRE_DATETM,NEW.CRE_USER,NEW.UPD_FUNC,NEW.UPD_DATETM,NEW.UPD_USER,NEW.DEL_FUNC,NEW.DEL_DATETM,NEW.DEL_USER);
END IF;

END//

CREATE TRIGGER RACK_MST_SALES_DEL AFTER DELETE ON RACK_MST_SALES FOR EACH ROW BEGIN
DECLARE histId INT UNSIGNED DEFAULT 0;
IF OLD.DEL_USER IS NULL OR OLD.DEL_USER <> 'NOLOG' THEN
SET histId = GET_NEXT_VAL_HIST('RACK_MST');

INSERT INTO RACK_MST_HIST_SALES(HIST_ID,ACTION_TYPE,ACTION_FUNC,REC_DATETM,REC_USER,WAREHOUSE_CODE,RACK_CODE,RACK_NAME,RACK_CATEGORY,MULTI_FLAG,ZIP_CODE,ADDRESS_1,ADDRESS_2,RACK_PC_NAME,RACK_TEL,RACK_FAX,RACK_EMAIL,CRE_FUNC,CRE_DATETM,CRE_USER,UPD_FUNC,UPD_DATETM,UPD_USER,DEL_FUNC,DEL_DATETM,DEL_USER) VALUES ( histId, 'DELETE', OLD.DEL_FUNC, now(), OLD.DEL_USER,OLD.WAREHOUSE_CODE,OLD.RACK_CODE,OLD.RACK_NAME,OLD.RACK_CATEGORY,OLD.MULTI_FLAG,OLD.ZIP_CODE,OLD.ADDRESS_1,OLD.ADDRESS_2,OLD.RACK_PC_NAME,OLD.RACK_TEL,OLD.RACK_FAX,OLD.RACK_EMAIL,OLD.CRE_FUNC,OLD.CRE_DATETM,OLD.CRE_USER,OLD.UPD_FUNC,OLD.UPD_DATETM,OLD.UPD_USER,OLD.DEL_FUNC,OLD.DEL_DATETM,OLD.DEL_USER);
END IF;

END//

DELIMITER ;

